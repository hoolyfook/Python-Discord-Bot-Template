import discord
from discord import app_commands
from discord.ext import commands
from discord.ext.commands import Context
from discord import Embed, Member
import aiosqlite
from datetime import datetime
from database.mongodb import mongodb

class General(commands.Cog, name="general"):
    def __init__(self, bot) -> None:
        self.bot = bot
        self.context_menu_user = app_commands.ContextMenu(
            name="Grab ID", callback=self.grab_id
        )
        self.bot.tree.add_command(self.context_menu_user)
        self.context_menu_message = app_commands.ContextMenu(
            name="Remove spoilers", callback=self.remove_spoilers
        )
        self.bot.tree.add_command(self.context_menu_message)
        self.cultivation_levels = [
            # (T√™n, [C√°c k·ª≥ nh·ªè/t·∫ßng], Th·ªç nguy√™n, M√†u s·∫Øc, M√¥ t·∫£)
            ("Ph√†m Nh√¢n", [], "70-100", 0xAAAAAA, "Ng∆∞·ªùi th∆∞·ªùng, ch∆∞a tu luy·ªán."),
            ("Luy·ªán Kh√≠", [f"{i} t·∫ßng" for i in range(1, 10)], "120-150", 0xCCCCCC, "B∆∞·ªõc ƒë·∫ßu h·∫•p thu linh kh√≠."),
            ("Tr√∫c C∆°", ["S∆° K·ª≥", "Trung K·ª≥", "H·∫≠u K·ª≥", "Vi√™n M√£n"], "200-300", 0x00FF00, "X√¢y d·ª±ng n·ªÅn t·∫£ng tu luy·ªán."),
            ("Kim ƒêan", ["S∆° K·ª≥", "Trung K·ª≥", "H·∫≠u K·ª≥", "Vi√™n M√£n"], "500-800", 0xFFD700, "K·∫øt tinh linh l·ª±c th√†nh kim ƒëan."),
            ("Nguy√™n Anh", ["S∆° K·ª≥", "Trung K·ª≥", "H·∫≠u K·ª≥", "Vi√™n M√£n"], "1000-1500", 0xFF4500, "Ng∆∞ng t·ª• nguy√™n anh."),
            ("H√≥a Th·∫ßn", ["S∆° K·ª≥", "Trung K·ª≥", "H·∫≠u K·ª≥", "Vi√™n M√£n"], "2000-3000", 0x9932CC, "H√≥a th·∫ßn th√†nh ti√™n."),
            ("Luy·ªán H∆∞", ["S∆° K·ª≥", "Trung K·ª≥", "H·∫≠u K·ª≥", "Vi√™n M√£n"], "4000-6000", 0x4169E1, "Luy·ªán h∆∞ th√†nh th·ª±c."),
            ("H·ª£p Th·ªÉ", ["S∆° K·ª≥", "Trung K·ª≥", "H·∫≠u K·ª≥", "Vi√™n M√£n"], "8000-10000", 0xFF0000, "H·ª£p nh·∫•t v·ªõi thi√™n ƒë·ªãa."),
            ("ƒê·∫°i Th·ª´a", ["S∆° K·ª≥", "Trung K·ª≥", "H·∫≠u K·ª≥", "Vi√™n M√£n"], "20000-30000", 0xFFFFFF, "ƒê·∫°t ƒë·∫øn c·∫£nh gi·ªõi t·ªëi cao."),
            ("Phi ThƒÉng", ["Qua Ki·∫øp ƒê·ªô"], "", 0x00FFFF, "ƒê·ªô ki·∫øp phi thƒÉng."),
            # Ti√™n Nh√¢n tr·ªü l√™n
            ("Ch√¢n Ti√™n", [], "V√¥ h·∫°n", 0xFFD700, "B∆∞·ªõc v√†o h√†ng ng≈© ti√™n nh√¢n."),
            ("Huy·ªÅn Ti√™n", [], "V√¥ h·∫°n", 0xBEBEFE, "C·∫£nh gi·ªõi cao h∆°n Ch√¢n Ti√™n."),
            ("Kim Ti√™n", [], "V√¥ h·∫°n", 0xFFD700, "C·∫£nh gi·ªõi Kim Ti√™n."),
            ("Th√°i ·∫§t Ch√¢n Ti√™n", [], "V√¥ h·∫°n", 0xFF00FF, "C·∫£nh gi·ªõi Th√°i ·∫§t Ch√¢n Ti√™n."),
            ("ƒê·∫°i La Kim Ti√™n", [], "V√¥ h·∫°n", 0x00FF00, "C·∫£nh gi·ªõi ƒê·∫°i La Kim Ti√™n."),
            ("Th√°nh Nh√¢n", [], "V√¥ h·∫°n", 0xFF0000, "C·∫£nh gi·ªõi Th√°nh Nh√¢n, t·ªëi th∆∞·ª£ng.")
        ]
        self.level_requirements = [1000, 2000, 4000, 8000, 16000, 32000, 64000, 128000]

    # Message context menu command
    async def remove_spoilers(
        self, interaction: discord.Interaction, message: discord.Message
    ) -> None:
        """
        Removes the spoilers from the message. This command requires the MESSAGE_CONTENT intent to work properly.

        :param interaction: The application command interaction.
        :param message: The message that is being interacted with.
        """
        spoiler_attachment = None
        for attachment in message.attachments:
            if attachment.is_spoiler():
                spoiler_attachment = attachment
                break
        embed = discord.Embed(
            title="Message without spoilers",
            description=message.content.replace("||", ""),
            color=0xBEBEFE,
        )
        if spoiler_attachment is not None:
            embed.set_image(url=attachment.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)

    # User context menu command
    async def grab_id(
        self, interaction: discord.Interaction, user: discord.User
    ) -> None:
        """
        Grabs the ID of the user.

        :param interaction: The application command interaction.
        :param user: The user that is being interacted with.
        """
        embed = discord.Embed(
            description=f"The ID of {user.mention} is `{user.id}`.",
            color=0xBEBEFE,
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @commands.hybrid_command(
        name="hoso",
        aliases=["tuvi"],
        description="Xem h·ªì s∆° tu luy·ªán c·ªßa b·∫°n"
    )
    async def hoso(self, context: Context) -> None:
        """
        Xem h·ªì s∆° tu luy·ªán c·ªßa b·∫°n
        """
        user_id = str(context.author.id)
        await self.ensure_user(user_id, username=context.author.name)

        user = await mongodb.get_user(user_id)
        if not user:
            embed = discord.Embed(
                title="L·ªói H·ªì S∆°",
                description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!",
                color=0xFF4500
            )
            embed.set_footer(text=f"SpiritStone Bot | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            await context.send(embed=embed)
            return

        cultivation_level = user["cultivation_level"]
        cultivation_points = user["cultivation_points"]
        info = self.get_cultivation_info(cultivation_level)
        
        # T√≠nh ƒëi·ªÉm c·∫ßn thi·∫øt cho ƒë·ªôt ph√° ti·∫øp theo
        next_level_points = self.get_points_needed(cultivation_level + 1)
        
        embed = discord.Embed(
            title=f"H·ªì S∆° Tu Luy·ªán c·ªßa {context.author.name}",
            description=f"**C·∫£nh Gi·ªõi:** {info['realm']} {info['sublevel']}\n**M√¥ T·∫£:** {info['desc']}",
            color=info['color']
        )
        
        # Th√™m avatar n·∫øu c√≥
        if context.author.avatar:
            embed.set_thumbnail(url=context.author.avatar.url)
        
        # Th√™m th√¥ng tin ƒëi·ªÉm tu vi
        embed.add_field(
            name="ƒêi·ªÉm Tu Vi",
            value=f"**{cultivation_points:,}** ƒëi·ªÉm",
            inline=True
        )
        
        # Th√™m th√¥ng tin ƒë·ªôt ph√° ti·∫øp theo
        embed.add_field(
            name="ƒê·ªôt Ph√° Ti·∫øp Theo",
            value=f"C·∫ßn **{next_level_points:,}** ƒëi·ªÉm tu vi",
            inline=True
        )
        
        # Th√™m t·ª∑ l·ªá th√†nh c√¥ng cho ƒë·ªôt ph√° ti·∫øp theo
        success_rate = 100 - (cultivation_level * 5)
        success_rate = max(10, success_rate)
        embed.add_field(
            name="T·ª∑ L·ªá Th√†nh C√¥ng",
            value=f"**{success_rate}%**",
            inline=True
        )

        embed.add_field(
            name="Linh th·∫°ch",
            value=f"**{user['spirit_stones']}**",
            inline=True
        )
        
        embed.set_footer(text=f"SpiritStone Bot | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await context.send(embed=embed)

    def get_cultivation_info(self, level: int):
        # T√≠nh t·ªïng s·ªë b·∫≠c nh·ªè cho t·ª´ng c·∫£nh gi·ªõi
        index = 0
        for name, sublevels, tho_nguyen, color, desc in self.cultivation_levels:
            num_sub = len(sublevels) if sublevels else 1
            if level < index + num_sub:
                sub = sublevels[level - index] if sublevels else ""
                return {
                    "realm": name,
                    "sublevel": sub,
                    "desc": desc,
                    "color": color,
                    "tho_nguyen": tho_nguyen,
                    "level_name": f"{name} {sub}" if sub else name
                }
            index += num_sub
        # N·∫øu v∆∞·ª£t max, tr·∫£ v·ªÅ c·∫•p cu·ªëi c√πng
        name, sublevels, tho_nguyen, color, desc = self.cultivation_levels[-1]
        return {
            "realm": name,
            "sublevel": "",
            "desc": desc,
            "color": color,
            "tho_nguyen": tho_nguyen,
            "level_name": name
        }

    def get_points_needed(self, level: int):
        # V√≠ d·ª•: m·ªói c·∫•p c·∫ßn nhi·ªÅu h∆°n 15% so v·ªõi c·∫•p tr∆∞·ªõc
        base = 1000
        return int(base * (1.15 ** level))

    @commands.hybrid_command(
        name="ping",
        description="Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot."
    )
    async def ping(self, context: Context) -> None:
        """
        Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot.
        """
        embed = discord.Embed(
            title="üèì Pong!",
            description=f"ƒê·ªô tr·ªÖ c·ªßa bot l√† {round(self.bot.latency * 1000)}ms.",
            color=0xBEBEFE,
        )
        await context.send(embed=embed)

    @commands.hybrid_command(
        name="serverinfo",
        description="Xem th√¥ng tin v·ªÅ m√°y ch·ªß."
    )
    async def serverinfo(self, context: Context) -> None:
        """
        Xem th√¥ng tin v·ªÅ m√°y ch·ªß.
        """
        roles = [role.name for role in context.guild.roles]
        num_roles = len(roles)
        if num_roles > 50:
            roles = roles[:50]
            roles.append(f">>>> Hi·ªÉn th·ªã [50/{num_roles}] Vai tr√≤")
        roles = ", ".join(roles)

        embed = discord.Embed(
            title="**T√™n m√°y ch·ªß:**", description=f"{context.guild}", color=0xBEBEFE
        )
        if context.guild.icon is not None:
            embed.set_thumbnail(url=context.guild.icon.url)
        embed.add_field(name="ID m√°y ch·ªß", value=context.guild.id)
        embed.add_field(name="S·ªë th√†nh vi√™n", value=context.guild.member_count)
        embed.add_field(
            name="K√™nh vƒÉn b·∫£n/Tho·∫°i", value=f"{len(context.guild.channels)}"
        )
        embed.add_field(name=f"Vai tr√≤ ({len(context.guild.roles)})", value=roles)
        await context.send(embed=embed)

    @commands.hybrid_command(
        name="tiemlongbang",
        aliases=["tlb","bxh","bangxephang","cuonggia"],
        description="Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng top 10 ng∆∞·ªùi m·∫°nh nh·∫•t d·ª±a theo c·∫£nh gi·ªõi"
    )
    async def tiemlongbang(self, context: Context) -> None:
        """
        Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng top 10 ng∆∞·ªùi m·∫°nh nh·∫•t d·ª±a theo c·∫£nh gi·ªõi
        """
        # L·∫•y top 10 ng∆∞·ªùi d√πng c√≥ c·∫£nh gi·ªõi cao nh·∫•t
        top_users = await mongodb.get_top_users(10)
        
        if not top_users:
            embed = discord.Embed(
                title="Ti·ªÅm Long B·∫£ng",
                description="Ch∆∞a c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng!",
                color=0xFF4500
            )
            embed.set_footer(text=f"SpiritStone Bot | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            await context.send(embed=embed)
            return

        embed = discord.Embed(
            title="üèÜ Ti·ªÅm Long B·∫£ng",
            description="Top 10 ng∆∞·ªùi m·∫°nh nh·∫•t d·ª±a theo c·∫£nh gi·ªõi",
            color=0xFFD700
        )

        for i, user in enumerate(top_users, 1):
            user_info = self.get_cultivation_info(user["cultivation_level"])
            level_name = user_info["level_name"]
            tho_nguyen = user_info["tho_nguyen"]
            
            # Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o embed
            embed.add_field(
                name=f"{i}. {user['username']}",
                value=f"**C·∫£nh Gi·ªõi:** {level_name}\n**Th·ªç Nguy√™n:** {tho_nguyen}\n**Tu Vi:** {user['cultivation_points']:,} ƒëi·ªÉm",
                inline=False
            )

        embed.set_footer(text=f"SpiritStone Bot | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await context.send(embed=embed)

    async def ensure_user(self, user_id: str, username: str = None) -> None:
        """ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng t·ªìn t·∫°i trong database"""
        try:
            user = await mongodb.get_user(user_id)
            if not user:
                # Kh·ªüi t·∫°o ng∆∞·ªùi d√πng m·ªõi
                user_data = {
                    "_id": user_id,
                    "username": username,
                    "spirit_stones": 0,
                    "cultivation_level": 0,
                    "failed_rob_attempts": 0,
                    "last_checkin": 0,
                    "inventory": {},
                    "cultivation_points": 0,
                }
                await mongodb.update_user(user_id, user_data)
            elif username and user["username"] != username:
                # C·∫≠p nh·∫≠t username n·∫øu thay ƒë·ªïi
                await mongodb.update_user(user_id, {"username": username})
        except Exception as e:
            print(f"Error ensuring user: {str(e)}")
            raise

async def setup(bot) -> None:
    await bot.add_cog(General(bot))
