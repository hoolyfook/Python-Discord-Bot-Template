import time
from discord.ext import commands
from discord.ext.commands import Context
from datetime import datetime, timedelta
import aiosqlite
import random

class YCoin(commands.Cog, name="ycoin"):
    def __init__(self, bot) -> None:
        self.bot = bot

    async def ensure_user(self, user_id: str, username: str = None) -> None:
        # Ensure the user exists in the database, and update the username if necessary
        async with aiosqlite.connect("database/database.db") as db:
            # Check if the user exists in the database
            async with db.execute("SELECT user_id, username FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()

            if not row:
                # If the user doesn't exist, insert them into the database with the provided username
                await db.execute("INSERT INTO users (user_id, username, balance, last_daily) VALUES (?, ?, 0, ?)", 
                                (user_id, username, int(time.time())))
                await db.commit()
            else:
                # If the user exists but the username is different, update the username
                if row[1] != username:
                    await db.execute("UPDATE users SET username = ? WHERE user_id = ?", (username, user_id))
                    await db.commit()

    @commands.hybrid_command(
        name="xu",
        description="Xem s·ªë d∆∞ YCoin c·ªßa b·∫°n"
    )
    async def balance(self, ctx: Context) -> None:
        user_id = str(ctx.author.id)
        await self.ensure_user(user_id, username=ctx.author.name)

        async with aiosqlite.connect("database/database.db") as db:
            async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
                balance = row[0] if row else 0

        await ctx.send(f"üí∞ S·ªë d∆∞ YCoin c·ªßa b·∫°n l√†: **{balance} YCoin**")

    @commands.hybrid_command(
        name="diemdanh",
        description="Nh·∫≠n YCoin m·ªói ng√†y"
    )
    async def daily(self, ctx: Context) -> None:
        user_id = str(ctx.author.id)
        await self.ensure_user(user_id, username=ctx.author.name)

        # Get the current time
        current_time = int(time.time())

        async with aiosqlite.connect("database/database.db") as db:
            # Fetch the last claim time of the user
            async with db.execute("SELECT last_daily FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()

            if row:
                last_daily_time = row[0]

                # Check if a full day (24 hours) has passed
                time_difference = current_time - last_daily_time
                if time_difference > 86400:
                    # If less than 24 hours, notify the user they need to wait
                    await ctx.send(f"‚è≥ B·∫°n ƒë√£ nh·∫≠n YCoin g·∫ßn ƒë√¢y. H√£y quay l·∫°i sau {86400 - time_difference} gi√¢y n·ªØa.")
                    return

                # Update the user's last claim timestamp and grant YCoin
                daily_reward = 100  # Amount of YCoin for daily claim
                await db.execute("UPDATE users SET balance = balance + ?, last_daily = ? WHERE user_id = ?", 
                                 (daily_reward, current_time, user_id))
                await db.commit()

                # Send the success message
                await ctx.send(f"üéâ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **{daily_reward} YCoin**! H·∫πn g·∫∑p l·∫°i ng√†y mai! üí∞")
            else:
                # In case the user data doesn't exist (should not happen if `ensure_user` works properly)
                await ctx.send("‚ö†Ô∏è L·ªói khi truy xu·∫•t d·ªØ li·ªáu ng∆∞·ªùi d√πng.")

    @commands.hybrid_command(
        name="chuyen",
        description="Chuy·ªÉn YCoin cho ng∆∞·ªùi kh√°c"
    )
    async def transfer(self, ctx: Context, member: commands.MemberConverter, amount: int) -> None:
        sender_id = str(ctx.author.id)
        receiver_id = str(member.id)

        # Ensure the user isn't transferring YCoins to themselves
        if member.id == ctx.author.id:
            await ctx.send("‚ùå B·∫°n kh√¥ng th·ªÉ chuy·ªÉn YCoin cho ch√≠nh m√¨nh.")
            return

        # Ensure the amount is valid
        if amount <= 0:
            await ctx.send("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
            return

        await self.ensure_user(sender_id, username=ctx.author.name)
        await self.ensure_user(receiver_id, username=member.name)

        async with aiosqlite.connect("database/database.db") as db:
            # L·∫•y s·ªë d∆∞ ng∆∞·ªùi g·ª≠i
            async with db.execute("SELECT balance FROM users WHERE user_id = ?", (sender_id,)) as cursor:
                row = await cursor.fetchone()
                sender_balance = row[0] if row else 0

            # Check if the sender has enough balance
            if sender_balance < amount:
                await ctx.send("‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß YCoin ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y.")
                return

            # Update the user's balance and usernames
            await db.execute("UPDATE users SET balance = balance - ?, username = ? WHERE user_id = ?", 
                            (amount, ctx.author.name, sender_id))
            await db.execute("UPDATE users SET balance = balance + ?, username = ? WHERE user_id = ?", 
                            (amount, member.name, receiver_id))
            await db.commit()

        # Send confirmation message
        await ctx.send(f"‚úÖ B·∫°n ƒë√£ chuy·ªÉn **{amount} YCoin** cho {member.mention}!")

    @commands.command(
        name="rob",
        description="Tr·ªôm 5% YCoin t·ª´ 1 ng∆∞·ªùi ng·∫´u nhi√™n trong server"
    )
    async def rob(self, ctx: Context) -> None:
        robber_id = str(ctx.author.id)  # Get robber's ID (the user issuing the command)
        await self.ensure_user(robber_id, username=ctx.author.name)

        async with aiosqlite.connect("database/database.db") as db:
            # Fetch a random user from the database who has a positive balance and is not the robber
            async with db.execute(
                "SELECT user_id, balance FROM users WHERE balance > 0 AND user_id != ? ORDER BY RANDOM() LIMIT 1", 
                (robber_id,)
            ) as cursor:
                row = await cursor.fetchone()

            if row:
                target_user_id, balance = row
                steal_amount = balance // 20  # 5%

                if steal_amount <= 0:
                    await ctx.send(f"ü§∑ Ng∆∞·ªùi c√≥ ID {target_user_id} ngh√®o qu√°, kh√¥ng tr·ªôm ƒë∆∞·ª£c g√¨.")
                    return

                # Ensure the robber isn't the target
                if robber_id == target_user_id:
                    await ctx.send("ü§î B·∫°n kh√¥ng th·ªÉ tr·ªôm ch√≠nh m√¨nh!")
                    return

                # Get the target Discord user object
                target = ctx.guild.get_member(int(target_user_id))

                if target:
                    # Perform the robbery (update balances)
                    await db.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (steal_amount, target_user_id))
                    await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (steal_amount, robber_id))
                    await db.commit()

                    # Send the message about the robbery and mention the target
                    await ctx.send(f"üïµÔ∏è‚Äç‚ôÇÔ∏è B·∫°n ƒë√£ tr·ªôm ƒë∆∞·ª£c **{steal_amount} YCoin** t·ª´ <@{target_user_id}>!")
                else:
                    # If the target is no longer in the server, find another target or notify the user
                    await ctx.send(f"üòÖ Ng∆∞·ªùi c√≥ ID {target_user_id} kh√¥ng c√≤n trong server.")
                    # Optionally, you can repeat the query or inform the user there's no valid target.
            else:
                await ctx.send("üòÖ Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi c√≥ YCoin ƒë·ªÉ tr·ªôm!")

async def setup(bot) -> None:
    await bot.add_cog(YCoin(bot))
