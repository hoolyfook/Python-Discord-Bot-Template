import discord
from discord.ext import commands
from discord import Embed
from database.mongodb import MongoDB
from datetime import datetime
from utils.constants import CULTIVATION_LEVELS, LEVEL_REQUIREMENTS
import random
from typing import List, Tuple, Dict
import asyncio

class Gamble(commands.Cog, name="C·ªù b·∫°c"):
    def __init__(self, bot) -> None:
        self.bot = bot
        self.mongodb = MongoDB()
        self.cultivation_levels = CULTIVATION_LEVELS
        self.level_requirements = LEVEL_REQUIREMENTS
        self.active_games = {}  # L∆∞u tr·ªØ c√°c game ƒëang di·ªÖn ra

    def get_cultivation_info(self, level):
        level_info = self.cultivation_levels.get(level, {
            "name": "Unknown",
            "color": 0xAAAAAA,
            "description": "C·∫£nh gi·ªõi kh√¥ng x√°c ƒë·ªãnh",
            "tho_nguyen": "Unknown"
        })
        return level_info["name"]

    def create_deck(self) -> List[Tuple[str, str]]:
        """T·∫°o b·ªô b√†i 52 l√°"""
        suits = ["‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è"]
        values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
        deck = [(value, suit) for suit in suits for value in values]
        random.shuffle(deck)
        return deck

    def evaluate_hand(self, hand: List[Tuple[str, str]]) -> Tuple[str, int, List[int]]:
        """ƒê√°nh gi√° b√†i v√† tr·∫£ v·ªÅ t√™n hand, ƒëi·ªÉm v√† gi√° tr·ªã ƒë·ªÉ so s√°nh"""
        values = [card[0] for card in hand]
        suits = [card[1] for card in hand]
        
        value_map = {"2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, 
                    "9": 9, "10": 10, "J": 11, "Q": 12, "K": 13, "A": 14}
        numeric_values = [value_map[v] for v in values]
        numeric_values.sort(reverse=True)

        # Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p v√† l∆∞u gi√° tr·ªã ƒë·ªÉ so s√°nh
        if len(set(suits)) == 1 and len(set(numeric_values)) == 5 and max(numeric_values) - min(numeric_values) == 4:
            return "Th√πng ph√° s·∫£nh", 9, [max(numeric_values)]
        
        if any(numeric_values.count(x) == 4 for x in numeric_values):
            quad_value = [x for x in numeric_values if numeric_values.count(x) == 4][0]
            kicker = [x for x in numeric_values if x != quad_value][0]
            return "T·ª© qu√Ω", 8, [quad_value, kicker]
        
        if any(numeric_values.count(x) == 3 for x in numeric_values) and any(numeric_values.count(x) == 2 for x in numeric_values):
            triple_value = [x for x in numeric_values if numeric_values.count(x) == 3][0]
            pair_value = [x for x in numeric_values if numeric_values.count(x) == 2][0]
            return "C√π l≈©", 7, [triple_value, pair_value]
        
        if len(set(suits)) == 1:
            return "Th√πng", 6, sorted(numeric_values, reverse=True)
        
        if len(set(numeric_values)) == 5 and max(numeric_values) - min(numeric_values) == 4:
            return "S·∫£nh", 5, [max(numeric_values)]
        
        if any(numeric_values.count(x) == 3 for x in numeric_values):
            triple_value = [x for x in numeric_values if numeric_values.count(x) == 3][0]
            kickers = sorted([x for x in numeric_values if x != triple_value], reverse=True)
            return "S√°m c√¥", 4, [triple_value] + kickers
        
        if len([x for x in numeric_values if numeric_values.count(x) == 2]) == 4:
            pairs = sorted([x for x in numeric_values if numeric_values.count(x) == 2], reverse=True)
            kicker = [x for x in numeric_values if x not in pairs][0]
            return "Hai ƒë√¥i", 3, pairs + [kicker]
        
        if any(numeric_values.count(x) == 2 for x in numeric_values):
            pair_value = [x for x in numeric_values if numeric_values.count(x) == 2][0]
            kickers = sorted([x for x in numeric_values if x != pair_value], reverse=True)
            return "M·ªôt ƒë√¥i", 2, [pair_value] + kickers
        
        return "M·∫≠u th·∫ßu", 1, sorted(numeric_values, reverse=True)

    @commands.hybrid_command(
        name="poker",
        description="Ch∆°i poker v·ªõi linh th·∫°ch"
    )
    async def poker(self, context: commands.Context, bet: int) -> None:
        """
        Ch∆°i poker v·ªõi linh th·∫°ch
        bet: S·ªë linh th·∫°ch mu·ªën c∆∞·ª£c
        """
        if bet <= 0:
            await context.send("‚ùå S·ªë linh th·∫°ch c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return

        user_id = str(context.author.id)
        user = await self.mongodb.get_user(user_id)
        
        if not user:
            await context.send("‚ùå B·∫°n ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i!")
            return

        spirit_stones = user.get("spirit_stones", 0)
        if spirit_stones < bet:
            await context.send(f"‚ùå B·∫°n kh√¥ng ƒë·ªß linh th·∫°ch! B·∫°n c√≥ {spirit_stones} linh th·∫°ch <:linhthachydon:1366455607812427807>.")
            return

        # T·∫°o b·ªô b√†i v√† chia b√†i
        deck = self.create_deck()
        player_hand = deck[:5]
        dealer_hand = deck[5:10]

        # ƒê√°nh gi√° b√†i
        player_hand_name, player_score, player_values = self.evaluate_hand(player_hand)
        dealer_hand_name, dealer_score, dealer_values = self.evaluate_hand(dealer_hand)

        # Hi·ªÉn th·ªã b√†i
        player_cards = " ".join([f"{card[0]}{card[1]}" for card in player_hand])
        dealer_cards = " ".join([f"{card[0]}{card[1]}" for card in dealer_hand])

        # T√≠nh k·∫øt qu·∫£
        if player_score > dealer_score:
            result = "üéâ Th·∫Øng"
            winnings = bet
            new_spirit_stones = spirit_stones + winnings
        elif player_score < dealer_score:
            result = "‚ùå Thua"
            winnings = -bet
            new_spirit_stones = spirit_stones + winnings
        else:
            result = "ü§ù H√≤a"
            winnings = 0
            new_spirit_stones = spirit_stones

        # C·∫≠p nh·∫≠t linh th·∫°ch
        await self.mongodb.update_user(user_id, {
            "spirit_stones": new_spirit_stones
        })

        # T·∫°o embed
        embed = Embed(
            title="üÉè K·∫øt Qu·∫£ Poker",
            color=0x00FF00 if winnings > 0 else 0xFF0000 if winnings < 0 else 0xFFFF00
        )
        
        embed.add_field(
            name="B√†i c·ªßa b·∫°n",
            value=f"{player_cards}\n**{player_hand_name}**",
            inline=False
        )
        
        embed.add_field(
            name="B√†i c·ªßa nh√† c√°i",
            value=f"{dealer_cards}\n**{dealer_hand_name}**",
            inline=False
        )
        
        embed.add_field(
            name="K·∫øt qu·∫£",
            value=f"{result}\nLinh th·∫°ch: {winnings:+d}",
            inline=False
        )
        
        embed.add_field(
            name="Linh th·∫°ch hi·ªán t·∫°i",
            value=f"{new_spirit_stones} linh th·∫°ch <:linhthachydon:1366455607812427807>",
            inline=False
        )

        embed.set_footer(text=f"SpiritStone Bot | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await context.send(embed=embed)

    @commands.hybrid_command(
        name="taixiu",
        description="Ch∆°i t√†i x·ªâu v·ªõi linh th·∫°ch"
    )
    async def taixiu(self, context: commands.Context, choice: str, bet: int) -> None:
        """
        Ch∆°i t√†i x·ªâu v·ªõi linh th·∫°ch
        choice: "tai" ho·∫∑c "xiu"
        bet: S·ªë linh th·∫°ch mu·ªën c∆∞·ª£c
        """
        # Validate choice
        choice = choice.lower()
        if choice not in ["tai", "xiu"]:
            await context.send("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Ch·ªâ ƒë∆∞·ª£c ch·ªçn 'tai' ho·∫∑c 'xiu'")
            return

        # Validate bet amount
        if bet <= 0:
            await context.send("‚ùå S·ªë linh th·∫°ch c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return

        user_id = str(context.author.id)
        user = await self.mongodb.get_user(user_id)
        
        if not user:
            await context.send("‚ùå B·∫°n ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i!")
            return

        spirit_stones = user.get("spirit_stones", 0)
        if spirit_stones < bet:
            await context.send(f"‚ùå B·∫°n kh√¥ng ƒë·ªß linh th·∫°ch! B·∫°n c√≥ {spirit_stones} linh th·∫°ch <:linhthachydon:1366455607812427807>.")
            return

        # Roll 3 dice
        dice1 = random.randint(1, 6)
        dice2 = random.randint(1, 6)
        dice3 = random.randint(1, 6)
        total = dice1 + dice2 + dice3

        # Determine result
        result = "tai" if total >= 11 else "xiu"
        
        # Calculate winnings
        if choice == result:
            winnings = bet
            new_spirit_stones = spirit_stones + winnings
            result_text = "üéâ Th·∫Øng"
        else:
            winnings = -bet
            new_spirit_stones = spirit_stones + winnings
            result_text = "‚ùå Thua"

        # Update user's spirit stones
        await self.mongodb.update_user(user_id, {
            "spirit_stones": new_spirit_stones
        })

        # Create embed
        embed = Embed(
            title="üé≤ K·∫øt Qu·∫£ T√†i X·ªâu",
            color=0x00FF00 if choice == result else 0xFF0000
        )
        embed.add_field(name="X√∫c x·∫Øc", value=f"üé≤ {dice1} üé≤ {dice2} üé≤ {dice3}", inline=False)
        embed.add_field(name="T·ªïng", value=f"{total} ({result.upper()})", inline=False)
        embed.add_field(name="L·ª±a ch·ªçn", value=choice.upper(), inline=False)
        embed.add_field(name="K·∫øt qu·∫£", value=result_text, inline=False)
        embed.add_field(name="Linh th·∫°ch", value=f"{winnings:+d} linh th·∫°ch", inline=False)
        embed.add_field(name="Linh th·∫°ch hi·ªán t·∫°i", value=f"{new_spirit_stones} linh th·∫°ch <:linhthachydon:1366455607812427807>", inline=False)

        await context.send(embed=embed)

    @commands.hybrid_command(
        name="pokersolo",
        description="Ch∆°i poker 1v1 theo ki·ªÉu t·ªë"
    )
    async def pokersolo(self, context: commands.Context, bet: int, target: discord.Member) -> None:
        """
        Ch∆°i poker 1v1 theo ki·ªÉu t·ªë
        bet: S·ªë linh th·∫°ch mu·ªën c∆∞·ª£c
        target: Ng∆∞·ªùi ch∆°i mu·ªën th√°ch ƒë·∫•u
        """
        if bet <= 0:
            await context.send("‚ùå S·ªë linh th·∫°ch c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return

        if target.bot:
            await context.send("‚ùå Kh√¥ng th·ªÉ ch∆°i v·ªõi bot!")
            return

        if target.id == context.author.id:
            await context.send("‚ùå Kh√¥ng th·ªÉ t·ª± ch∆°i v·ªõi ch√≠nh m√¨nh!")
            return

        # Ki·ªÉm tra linh th·∫°ch c·ªßa c·∫£ hai ng∆∞·ªùi
        player1_id = str(context.author.id)
        player2_id = str(target.id)
        
        player1 = await self.mongodb.get_user(player1_id)
        player2 = await self.mongodb.get_user(player2_id)
        
        if not player1 or not player2:
            await context.send("‚ùå M·ªôt trong hai ng∆∞·ªùi ch∆°i ch∆∞a c√≥ d·ªØ li·ªáu!")
            return

        player1_stones = player1.get("spirit_stones", 0)
        player2_stones = player2.get("spirit_stones", 0)
        
        if player1_stones < bet:
            await context.send(f"‚ùå B·∫°n kh√¥ng ƒë·ªß linh th·∫°ch! B·∫°n c√≥ {player1_stones} linh th·∫°ch.")
            return
            
        if player2_stones < bet:
            await context.send(f"‚ùå {target.name} kh√¥ng ƒë·ªß linh th·∫°ch! H·ªç c√≥ {player2_stones} linh th·∫°ch.")
            return

        # T·∫°o game m·ªõi
        game_id = f"{player1_id}_{player2_id}"
        if game_id in self.active_games:
            await context.send("‚ùå ƒê√£ c√≥ m·ªôt game ƒëang di·ªÖn ra gi·ªØa hai ng∆∞·ªùi!")
            return

        # G·ª≠i l·ªùi m·ªùi
        embed = Embed(
            title="üé¥ L·ªùi M·ªùi Ch∆°i Poker",
            description=f"{context.author.mention} ƒë√£ th√°ch ƒë·∫•u {target.mention} ch∆°i poker v·ªõi s·ªë c∆∞·ª£c {bet:,} linh th·∫°ch!",
            color=0x00FF00
        )
        embed.add_field(
            name="Th·ªùi gian ch·ªù",
            value="B·∫°n c√≥ 30 gi√¢y ƒë·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùi!",
            inline=False
        )
        embed.set_footer(text=f"SpiritStone Bot | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        msg = await context.send(embed=embed)
        await msg.add_reaction("‚úÖ")
        await msg.add_reaction("‚ùå")

        try:
            def check(reaction, user):
                return user == target and str(reaction.emoji) in ["‚úÖ", "‚ùå"] and reaction.message.id == msg.id

            reaction, user = await self.bot.wait_for('reaction_add', timeout=30.0, check=check)
            
            if str(reaction.emoji) == "‚ùå":
                await context.send(f"‚ùå {target.mention} ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi!")
                return
                
        except asyncio.TimeoutError:
            await context.send("‚ùå ƒê√£ h·∫øt th·ªùi gian ch·ªù ph·∫£n h·ªìi!")
            return

        # B·∫Øt ƒë·∫ßu game
        self.active_games[game_id] = {
            "player1": player1_id,
            "player2": player2_id,
            "bet": bet,
            "pot": bet * 2,
            "deck": self.create_deck(),
            "community_cards": [],
            "current_player": player1_id,
            "last_bet": bet,
            "round": 0  # 0: Pre-flop, 1: Flop, 2: Turn, 3: River
        }

        # Chia b√†i
        game = self.active_games[game_id]
        game["player1_hand"] = game["deck"][:2]
        game["player2_hand"] = game["deck"][2:4]
        game["deck"] = game["deck"][4:]

        # Hi·ªÉn th·ªã b√†i
        await self.show_game_state(context, game_id)

    async def show_game_state(self, context: commands.Context, game_id: str) -> None:
        """Hi·ªÉn th·ªã tr·∫°ng th√°i game"""
        game = self.active_games[game_id]
        player1 = self.bot.get_user(int(game["player1"]))
        player2 = self.bot.get_user(int(game["player2"]))

        # G·ª≠i b√†i cho ng∆∞·ªùi ch∆°i 1
        player1_cards = " ".join([f"{card[0]}{card[1]}" for card in game["player1_hand"]])
        await player1.send(embed=Embed(title="üé¥ B√†i c·ªßa b·∫°n", description=player1_cards, color=0x00FF00))

        # G·ª≠i b√†i cho ng∆∞·ªùi ch∆°i 2
        player2_cards = " ".join([f"{card[0]}{card[1]}" for card in game["player2_hand"]])
        await player2.send(embed=Embed(title="üé¥ B√†i c·ªßa b·∫°n", description=player2_cards, color=0x00FF00))

        # Hi·ªÉn th·ªã tr·∫°ng th√°i game c√¥ng khai
        embed = Embed(title="üé¥ Poker 1v1", description=f"V√°n b√†i ƒëang di·ªÖn ra gi·ªØa {player1.mention} v√† {player2.mention}", color=0x00FF00)
        
        # Hi·ªÉn th·ªã b√†i chung
        community_cards = " ".join([f"{card[0]}{card[1]}" for card in game["community_cards"]]) if game["community_cards"] else "Ch∆∞a c√≥ b√†i chung"
        embed.add_field(name="B√†i chung", value=community_cards, inline=False)

        # Hi·ªÉn th·ªã pot v√† l∆∞·ª£t ch∆°i hi·ªán t·∫°i
        embed.add_field(name="Pot hi·ªán t·∫°i", value=f"{game['pot']:,} linh th·∫°ch", inline=False)
        
        # Hi·ªÉn th·ªã s·ªë linh th·∫°ch t·ªë g·∫ßn nh·∫•t
        embed.add_field(
            name="S·ªë linh th·∫°ch t·ªë g·∫ßn nh·∫•t",
            value=f"{game['last_bet']:,} linh th·∫°ch",
            inline=False
        )
        
        # Hi·ªÉn th·ªã l∆∞·ª£t ch∆°i v√† h∆∞·ªõng d·∫´n
        current_player = self.bot.get_user(int(game["current_player"]))
        action_guide = (
            f"ƒê·∫øn l∆∞·ª£t {current_player.mention}\n\n"
            "**H∆∞·ªõng d·∫´n:**\n"
            "üìà - T·ªë th√™m (Raise): T·ªë th√™m linh th·∫°ch v√†o pot\n"
            "üëã - Theo (Call/Check): Theo s·ªë linh th·∫°ch ƒë√£ t·ªë ho·∫∑c kh√¥ng t·ªë th√™m\n"
            "‚ùå - B·ªè b√†i (Fold): B·ªè b√†i v√† ƒë·ªÉ ƒë·ªëi th·ªß th·∫Øng pot"
        )
        embed.add_field(
            name="L∆∞·ª£t ch∆°i",
            value=action_guide,
            inline=False
        )

        # Hi·ªÉn th·ªã v√≤ng ch∆°i hi·ªán t·∫°i
        round_names = {
            0: "Pre-flop (Ch∆∞a c√≥ b√†i chung)",
            1: "Flop (3 l√° b√†i chung ƒë·∫ßu ti√™n)",
            2: "Turn (L√° b√†i chung th·ª© 4)",
            3: "River (L√° b√†i chung cu·ªëi c√πng)"
        }
        embed.add_field(
            name="V√≤ng ch∆°i hi·ªán t·∫°i",
            value=round_names.get(game["round"], "Kh√¥ng x√°c ƒë·ªãnh"),
            inline=False
        )
        
        # Th√™m c√°c n√∫t h√†nh ƒë·ªông
        msg = await context.send(embed=embed)
        await msg.add_reaction("üìà")  # T·ªë
        await msg.add_reaction("üëã")  # Theo
        await msg.add_reaction("‚ùå")  # B·ªè b√†i

        # Ch·ªù ng∆∞·ªùi ch∆°i h√†nh ƒë·ªông
        try:
            def check(reaction, user):
                return user.id == int(game["current_player"]) and str(reaction.emoji) in ["üìà", "üëã", "‚ùå"] and reaction.message.id == msg.id

            reaction, user = await self.bot.wait_for('reaction_add', timeout=60.0, check=check)
            
            if str(reaction.emoji) == "‚ùå":
                # X·ª≠ l√Ω b·ªè b√†i
                winner_id = game["player2"] if game["current_player"] == game["player1"] else game["player1"]
                await self.end_game(context, game_id, winner_id)
                return
                
            elif str(reaction.emoji) == "üìà":
                # X·ª≠ l√Ω t·ªë
                await self.handle_bet(context, game_id)
                
            elif str(reaction.emoji) == "üëã":
                # X·ª≠ l√Ω theo
                if game["last_bet"] > 0:
                    # N·∫øu c√≥ ng∆∞·ªùi t·ªë tr∆∞·ªõc ƒë√≥, ng∆∞·ªùi ch∆°i hi·ªán t·∫°i ph·∫£i theo s·ªë linh th·∫°ch ƒë√≥
                    current_player_id = game["current_player"]
                    await self.mongodb.update_user(current_player_id, {
                        "spirit_stones": (await self.mongodb.get_user(current_player_id))["spirit_stones"] - game["last_bet"]
                    })
                    game["pot"] += game["last_bet"]
                
                game["current_player"] = game["player2"] if game["current_player"] == game["player1"] else game["player1"]
                
                # N·∫øu c·∫£ hai ng∆∞·ªùi ƒë√£ theo, m·ªõi chuy·ªÉn sang v√≤ng ti·∫øp theo
                if game.get("both_checked", False):
                    game["round"] += 1
                    game["both_checked"] = False
                    game["last_bet"] = 0  # Reset s·ªë linh th·∫°ch t·ªë cho v√≤ng m·ªõi
                    
                    if game["round"] > 3:
                        # K·∫øt th√∫c v√°n b√†i
                        await self.showdown(context, game_id)
                    else:
                        # Chia b√†i chung m·ªõi
                        if game["round"] == 1:  # Flop
                            game["community_cards"] = game["deck"][:3]
                            game["deck"] = game["deck"][3:]
                        elif game["round"] in [2, 3]:  # Turn v√† River
                            game["community_cards"].append(game["deck"][0])
                            game["deck"] = game["deck"][1:]
                        
                        await self.show_game_state(context, game_id)
                else:
                    # ƒê√°nh d·∫•u ng∆∞·ªùi ch∆°i n√†y ƒë√£ theo
                    game["both_checked"] = True
                    # Hi·ªÉn th·ªã tr·∫°ng th√°i m·ªõi v√† ch·ªù ng∆∞·ªùi kia h√†nh ƒë·ªông
                    await self.show_game_state(context, game_id)
                
        except asyncio.TimeoutError:
            # X·ª≠ l√Ω h·∫øt th·ªùi gian
            await context.send(f"‚ùå {player1.mention} ƒë√£ h·∫øt th·ªùi gian h√†nh ƒë·ªông (60 gi√¢y)!")
            winner_id = game["player2"] if game["current_player"] == game["player1"] else game["player1"]
            await self.end_game(context, game_id, winner_id)

    async def handle_bet(self, context: commands.Context, game_id: str) -> None:
        """X·ª≠ l√Ω h√†nh ƒë·ªông t·ªë"""
        game = self.active_games[game_id]
        current_player = self.bot.get_user(int(game["current_player"]))
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i t·ª´ database
        current_player_data = await self.mongodb.get_user(str(current_player.id))
        current_spirit_stones = current_player_data.get("spirit_stones", 0)
        
        embed = Embed(
            title="üìà T·ªë th√™m linh th·∫°ch",
            description=(
                f"{current_player.mention}, h√£y nh·∫≠p s·ªë linh th·∫°ch mu·ªën t·ªë\n\n"
                f"**H∆∞·ªõng d·∫´n:**\n"
                f"‚Ä¢ S·ªë linh th·∫°ch t·ªë ph·∫£i l·ªõn h∆°n s·ªë t·ªë g·∫ßn nh·∫•t: {game['last_bet']:,}\n"
                f"‚Ä¢ Linh th·∫°ch hi·ªán c√≥: {current_spirit_stones:,}\n"
                f"‚Ä¢ Nh·∫≠p s·ªë linh th·∫°ch trong v√≤ng 30 gi√¢y"
            ),
            color=0x00FF00
        )
        await context.send(embed=embed)
        
        try:
            def check(m):
                return m.author.id == int(game["current_player"]) and m.channel == context.channel

            msg = await self.bot.wait_for('message', timeout=30.0, check=check)
            
            try:
                bet_amount = int(msg.content)
                
                # Ki·ªÉm tra s·ªë linh th·∫°ch t·ªë
                if bet_amount <= game["last_bet"]:
                    await context.send(
                        f"‚ùå S·ªë linh th·∫°ch t·ªë ({bet_amount:,}) ph·∫£i l·ªõn h∆°n s·ªë t·ªë g·∫ßn nh·∫•t ({game['last_bet']:,})!"
                    )
                    await self.show_game_state(context, game_id)
                    return
                    
                if bet_amount > current_spirit_stones:
                    await context.send(
                        f"‚ùå B·∫°n kh√¥ng ƒë·ªß linh th·∫°ch! B·∫°n ch·ªâ c√≥ {current_spirit_stones:,} linh th·∫°ch."
                    )
                    await self.show_game_state(context, game_id)
                    return
                
                # Tr·ª´ linh th·∫°ch c·ªßa ng∆∞·ªùi ch∆°i
                await self.mongodb.update_user(str(current_player.id), {
                    "spirit_stones": current_spirit_stones - bet_amount
                })
                
                # C·∫≠p nh·∫≠t pot v√† last_bet
                game["pot"] += bet_amount
                game["last_bet"] = bet_amount
                game["current_player"] = game["player2"] if game["current_player"] == game["player1"] else game["player1"]
                game["both_checked"] = False  # Reset tr·∫°ng th√°i theo khi c√≥ ng∆∞·ªùi t·ªë m·ªõi
                
                # Th√¥ng b√°o t·ªë th√†nh c√¥ng
                await context.send(
                    f"‚úÖ {current_player.mention} ƒë√£ t·ªë {bet_amount:,} linh th·∫°ch!"
                )
                
                await self.show_game_state(context, game_id)
                
            except ValueError:
                await context.send("‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n h·ª£p l·ªá!")
                await self.show_game_state(context, game_id)
                
        except asyncio.TimeoutError:
            await context.send(f"‚ùå {current_player.mention} ƒë√£ h·∫øt th·ªùi gian t·ªë!")
            await self.show_game_state(context, game_id)

    async def showdown(self, context: commands.Context, game_id: str) -> None:
        """So b√†i khi k·∫øt th√∫c v√°n"""
        game = self.active_games[game_id]
        
        # T·∫°o hand ho√†n ch·ªânh cho m·ªói ng∆∞·ªùi ch∆°i
        player1_hand = game["player1_hand"] + game["community_cards"]
        player2_hand = game["player2_hand"] + game["community_cards"]
        
        # ƒê√°nh gi√° b√†i
        player1_hand_name, player1_score, player1_values = self.evaluate_hand(player1_hand)
        player2_hand_name, player2_score, player2_values = self.evaluate_hand(player2_hand)
        
        # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
        if player1_score > player2_score:
            winner_id = game["player1"]
        elif player2_score > player1_score:
            winner_id = game["player2"]
        else:
            # N·∫øu c√πng lo·∫°i hand, so s√°nh gi√° tr·ªã
            for p1_val, p2_val in zip(player1_values, player2_values):
                if p1_val > p2_val:
                    winner_id = game["player1"]
                    break
                elif p2_val > p1_val:
                    winner_id = game["player2"]
                    break
            else:
                # N·∫øu t·∫•t c·∫£ gi√° tr·ªã ƒë·ªÅu b·∫±ng nhau
                winner_id = None
                
        await self.end_game(context, game_id, winner_id)

    async def end_game(self, context: commands.Context, game_id: str, winner_id: str = None) -> None:
        """K·∫øt th√∫c game v√† trao th∆∞·ªüng"""
        game = self.active_games[game_id]
        player1 = self.bot.get_user(int(game["player1"]))
        player2 = self.bot.get_user(int(game["player2"]))
        
        embed = Embed(
            title="üé¥ K·∫øt Th√∫c V√°n B√†i",
            color=0x00FF00
        )
        
        if winner_id:
            winner = self.bot.get_user(int(winner_id))
            embed.description = f"üéâ {winner.mention} ƒë√£ th·∫Øng {game['pot']:,} linh th·∫°ch!"
            
            # C·∫≠p nh·∫≠t linh th·∫°ch
            if winner_id == game["player1"]:
                await self.mongodb.update_user(game["player1"], {
                    "spirit_stones": (await self.mongodb.get_user(game["player1"]))["spirit_stones"] + game["pot"]
                })
                await self.mongodb.update_user(game["player2"], {
                    "spirit_stones": (await self.mongodb.get_user(game["player2"]))["spirit_stones"] - game["bet"]
                })
            else:
                await self.mongodb.update_user(game["player2"], {
                    "spirit_stones": (await self.mongodb.get_user(game["player2"]))["spirit_stones"] + game["pot"]
                })
                await self.mongodb.update_user(game["player1"], {
                    "spirit_stones": (await self.mongodb.get_user(game["player1"]))["spirit_stones"] - game["bet"]
                })
        else:
            # H√≤a, tr·∫£ l·∫°i linh th·∫°ch
            embed.description = "ü§ù V√°n b√†i h√≤a! M·ªói ng∆∞·ªùi nh·∫≠n l·∫°i s·ªë linh th·∫°ch ƒë√£ c∆∞·ª£c."
            await self.mongodb.update_user(game["player1"], {
                "spirit_stones": (await self.mongodb.get_user(game["player1"]))["spirit_stones"] + game["bet"]
            })
            await self.mongodb.update_user(game["player2"], {
                "spirit_stones": (await self.mongodb.get_user(game["player2"]))["spirit_stones"] + game["bet"]
            })
        
        # Hi·ªÉn th·ªã b√†i c·ªßa c·∫£ hai ng∆∞·ªùi
        player1_cards = " ".join([f"{card[0]}{card[1]}" for card in game["player1_hand"]])
        player2_cards = " ".join([f"{card[0]}{card[1]}" for card in game["player2_hand"]])
        community_cards = " ".join([f"{card[0]}{card[1]}" for card in game["community_cards"]])
        
        embed.add_field(
            name=f"B√†i c·ªßa {player1.name}",
            value=player1_cards,
            inline=False
        )
        embed.add_field(
            name=f"B√†i c·ªßa {player2.name}",
            value=player2_cards,
            inline=False
        )
        embed.add_field(
            name="B√†i chung",
            value=community_cards,
            inline=False
        )
        
        embed.set_footer(text=f"SpiritStone Bot | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await context.send(embed=embed)
        
        # X√≥a game kh·ªèi active_games
        del self.active_games[game_id]

async def setup(bot) -> None:
    await bot.add_cog(Gamble(bot)) 